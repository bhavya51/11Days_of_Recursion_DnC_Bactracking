//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.io.*;
import java.lang.*;

class Sorting
{
    public static void main (String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        long t = sc.nextLong();
        
        while(t-- > 0)
        {
            long n = sc.nextLong();
            long arr[] = new long[(int)n];
            
            for(long i = 0; i < n; i++)
             arr[(int)i] = sc.nextLong();
             
            System.out.println(new Solution().inversionCount(arr, n));
            
        }
    }
}

// } Driver Code Ends

//User function Template for Java

class Solution
{
    static long ans;
    
    static void merge(long arr[],long temp[],int low,int mid,int high){
        int i=low;
        int j=mid+1;
        int k=low;
        
        while(i<=mid && j<=high){
            if(arr[i]<= arr[j]){
                temp[k++]=arr[i++];
            }
            else{
                temp[k++]=arr[j++];
                ans += mid-i+1;
            }
        }
        
        while(i<=mid){
            temp[k++]=arr[i++];
        }
        
        while(j<=high){
            temp[k++]=arr[j++];
        }
        
        for(i=low;i<=high;i++){
            arr[i]=temp[i];
        }
    }
    
    static void mergeSort(long arr[],long temp[],int low,int high){
        if(low<high){
            int mid = low + (high-low)/2;
            
            mergeSort(arr,temp,low,mid);
            mergeSort(arr,temp,mid+1,high);
            merge(arr,temp,low,mid,high);
        }
    }
    static long inversionCount(long arr[], long N)
    {
        ans=0;
        long temp[]=new long[(int)N];
        
        mergeSort(arr,temp,0,(int)N-1);
        
        return ans;
    }
}
