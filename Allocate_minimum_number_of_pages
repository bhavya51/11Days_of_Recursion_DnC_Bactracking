//{ Driver Code Starts
//Initial Template for Java

/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;
class GFG {
	public static void main (String[] args) {
		Scanner sc=new Scanner(System.in);
		
		int t=sc.nextInt();
		
		while(t-->0)
		{
		    int n=sc.nextInt();
		    int a[]=new int[n];
		    
		    for(int i=0;i<n;i++)
		    {
		        a[i]=sc.nextInt();
		    }
		    int m=sc.nextInt();
		    Solution ob = new Solution();
		    System.out.println(ob.findPages(a,n,m));
		}
	}
}
// } Driver Code Ends

//User function Template for Java

class Solution 
{
    //Function to find whether the mid is a possible solution to the question or not.
    public static boolean isPosSolution(int arr[], int n, int m, int mid){
        int studentCount = 1;
        int pageSum = 0;
        for(int i = 0; i<n; i++){
            if(pageSum + arr[i]<=mid){
                pageSum += arr[i];
            } 
            else{
                studentCount++;
                if(studentCount > m || arr[i] > mid){
                    return false;
                }
                pageSum = arr[i];
            }
        }
        return true;
    }
    
    //Function to find minimum number of pages.
    public static int findPages(int[]A,int N,int M)
    {
        //Your code here
        if(N<M){
            return -1;
        }
        
        int low = 0;
        int sum = 0;
        for(int i = 0; i<N; i++){
            sum += A[i];
        }
        int high = sum;
        int ans = -1;
        int mid;
        // loop
        while(low<=high){
            mid = low + (high - low)/2;
            
            if(isPosSolution(A, N, M, mid)) { 
                ans = mid;
                high = mid-1;
            } 
            else {
                low = mid + 1;
            }
        }
        return ans;
    }
};
