//{ Driver Code Starts
import java.util.*;

class Merge_Sort
{
    //method to print the elements of the array
	static void printArray(int arr[])
    {
        StringBuffer sb=new StringBuffer("");
        int n = arr.length;
        for (int i=0; i<n; ++i)
            sb.append(arr[i]+" ");
        System.out.println(sb.toString());
    }

    

	public static void main(String args[])
	{
	    //taking input using Scanner class
		Scanner sc = new Scanner(System.in);
		
		//taking testcases
		int T = sc.nextInt();
		while(T>0)
		{
		    //taking elements count
			int n = sc.nextInt();
			
			//creating an object of class Merge_Sort
			Merge_Sort ms = new Merge_Sort();
			
			//creating an array of size n
			int arr[] = new int[n];
			
			//adding elements to the array
			for(int i=0;i<n;i++)
				arr[i] = sc.nextInt();

            
			Solution g = new Solution();
			
			//calling the method mergeSort
			g.mergeSort(arr,0,arr.length-1);

            //calling the method printArray
			ms.printArray(arr);
		T--;
		}
	}
}

// } Driver Code Ends
class Solution
{
    void merge(int arr[], int l, int m, int r)
    {
        // Initializing iterators for left right and temp arr
        int temp[] = new int[r-l+1];
        int i = l; // for left part
        int j = m+1; // for right part
        int k = 0; // for the temp arr
        
        // loop to insert sorted elements in the array
        while(i <= m && j <= r){
            if(arr[i]<arr[j]){
                temp[k] = arr[i];
                i++;
            } else {
                temp[k] = arr[j];
                j++;
            }
            k++;
        }
        
        // For remaining element in the parts if any
        while(i<=m){
            temp[k++]=arr[i++];
        }
        
        while(j<=r){
            temp[k++]=arr[j++];
        }
        
        // copying the temp arr into the oiginal arr
        for(k=0, i=l; k<temp.length; k++, i++){
            arr[i] = temp[k];
        }
    }
    void mergeSort(int arr[], int l, int r)
    {
        // base case 
        if(l>=r){
            return;
        }
        // work we do
        int mid = l + (r-l)/2; //mid of the array
        mergeSort(arr, l, mid); //left part of the array
        mergeSort(arr, mid+1, r); //right part of the array
        merge(arr, l, mid, r);
    }
}
