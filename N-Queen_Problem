//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;
import java.lang.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0) {
            int n = Integer.parseInt(in.readLine());
            
            Solution ob = new Solution();
            ArrayList<ArrayList<Integer>> ans = ob.nQueen(n);
            if(ans.size() == 0)
                System.out.println("-1");
            else {
                for(int i = 0;i < ans.size();i++){
                    System.out.print("[");
                    for(int j = 0;j < ans.get(i).size();j++)
                        System.out.print(ans.get(i).get(j) + " ");
                    System.out.print("] ");
                }
                System.out.println();
            }
        }
    }
}
// } Driver Code Ends

// User function Template for Java

class Solution{
    static ArrayList<ArrayList<Integer>> nQueen(int n) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        int[] placement = new int[n];
        solveNQueensUtil(placement, 0, n, result);
        return result;
    }

    static boolean isSafe(int[] placement, int row, int col) {
        for (int i = 0; i < row; i++) {
            if (placement[i] == col || Math.abs(placement[i] - col) == Math.abs(i - row)) {
                return false;
            }
        }
        return true;
    }

    static void solveNQueensUtil(int[] placement, int row, int n, ArrayList<ArrayList<Integer>> result) {
        if (row == n) {
            // Found a solution, add to the result
            ArrayList<Integer> solution = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                solution.add(placement[i] + 1); // Add 1-based index to the result
            }
            result.add(new ArrayList<>(solution));
            return;
        }

        for (int col = 0; col < n; col++) {
            if (isSafe(placement, row, col)) {
                placement[row] = col;
                solveNQueensUtil(placement, row + 1, n, result);
            }
        }
    }

    public static void main(String[] args) {
        int n = 4;
        ArrayList<ArrayList<Integer>> solutions = nQueen(n);
        System.out.println(solutions);
    }
}
